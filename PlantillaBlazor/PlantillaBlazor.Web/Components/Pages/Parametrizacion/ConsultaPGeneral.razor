@attribute [PageInfo(IdModulo = 6)]

@page "/Parametrizacion/ConsultaParametroGeneral"

@using PlantillaBlazor.Domain.Entities.Parametrizacion
@using PlantillaBlazor.Services.Interfaces.Parametrizacion


@inject ILogger<ConsultaPGeneral> _logger
@inject IParametroGeneralService _pGeneralService;

<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0">Parámetros Generales</h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Parametrización</a></li>
                    <li class="breadcrumb-item active">Parámetros Generales</li>
                </ol>
            </div>

        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title mb-0">Consulta de parámetros generales</h4>
            </div>
            <div class="card-body">
                <div class="flex" style="justify-content: space-evenly">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" class="mt-2 mb-4" Text="Agregar Parámetro General" Click=AgregarPGeneral />

                </div>

                <RadzenDataGridApp @ref="grid"
                                   IsLoading="@_isLoading"
                                   RowRender="@RowRender"
                                   ExpandMode="DataGridExpandMode.Single"
                                   Data="@parametrosGenerales"
                                   TItem="ParametroGeneral">
                    <Template Context="pGeneral">
                        <RadzenCard Style="margin-bottom:20px">
                            Parámetro General:
                            <b>@pGeneral.Nombre</b>
                        </RadzenCard>
                        <RadzenTabs>
                            <Tabs>
                                <RadzenTabsItem Text="Parametros Detallados">
                                    <RadzenDataGridApp AllowFiltering="true" AllowPaging="true" Data="@pGeneral.ListaParametrosDetallados" TItem="ParametroDetallado">
                                        <Columns>
                                            <RadzenDataGridColumn Width="20px" TItem="ParametroDetallado" Title="#" Sortable="false" Filterable="false">
                                                <Template Context="data">
                                                    @(pGeneral.ListaParametrosDetallados.IndexOf(data) + 1)
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="ParametroDetallado" Property="Nombre" Title="Nombre" />
                                        </Columns>
                                    </RadzenDataGridApp>
                                </RadzenTabsItem>

                            </Tabs>
                        </RadzenTabs>
                    </Template>
                    <Columns>
                        <RadzenDataGridColumn TItem="ParametroGeneral" Width="40px" Property="" Title="" TextAlign="TextAlign.Center" Sortable="false">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="edit" Class="m-1" Click=@(() => EditarPGeneral(data.Id)) Text="" />
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="delete" Class="m-1" Click=@(() => EliminarPGeneral(data.Id)) Text="" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ParametroGeneral" Property="Nombre" Title="Nombre"></RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGridApp>
            </div>
            <!-- end card body -->
        </div>
        <!-- end card -->
    </div>
    <!-- end col -->
</div>

@code {
    private bool _isLoading = true;

    private RadzenDataGridApp<ParametroGeneral> grid;

    private IEnumerable<ParametroGeneral> parametrosGenerales;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try{
            if(firstRender)
            {
                await ConsultarPGenerales();
            }
        }
        catch(Exception exe){
            _logger.LogError(exe, $"Error al consultar parámetros generales");
            await _jsRuntime.NotiflixReportAlert("Error","Error al consultar parámetros generales",NotiflixMessageType.failure);
        }
    }

    private async Task ConsultarPGenerales()
    {
        _isLoading = true;
        StateHasChanged();

        parametrosGenerales = await _pGeneralService.ConsultarParametrosGenerales();

        _isLoading = false;
        StateHasChanged();
    }

    private async Task AgregarPGeneral()
    {
        _navigationManager.NavigateTo("/Parametrizacion/DetalleParametroGeneral");
    }

    private async Task EditarPGeneral(long idParametroGeneral)
    {
        _navigationManager.NavigateTo($"/Parametrizacion/DetalleParametroGeneral/{idParametroGeneral}");
    }

    private async Task EliminarPGeneral(long idParametroGeneral)
    {
        try
        {
            bool resultado = await _jsRuntime.NotiflixConfirmShow("Eliminar parámetro general", "¿Está seguro de eliminar el parámetro general?");

            if(resultado)
            {

                await _jsRuntime.NotiflixLoading(NotiflixLoadingType.circle, "Procesando");

                bool result = await _pGeneralService.EliminarParametroGeneral(idParametroGeneral);

                await _jsRuntime.NotiflixRemoveLoading();

                if (result)
                {
                    await _jsRuntime.NotiflixReportAlertWithCallback("Correcto", "Proceso realizado correctamente", NotiflixMessageType.success);
                    await ConsultarPGenerales();
                }
                else
                {
                    await _jsRuntime.NotiflixReportAlert("Error", "Error al eliminar el parámetro general", NotiflixMessageType.failure);
                }
            }
        }
        catch(Exception exe)
        {
            _logger.LogError(exe, $"Error al eliminar parámetro general {idParametroGeneral}");
            await _jsRuntime.NotiflixReportAlert("Error", "Error al eliminar el parámetro general", NotiflixMessageType.failure);
        }
    }

    void RowRender(RowRenderEventArgs<ParametroGeneral> args)
    {
        args.Expandable = true;
    }
}
