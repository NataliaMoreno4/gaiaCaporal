@using System.Reflection;
@using PlantillaBlazor.Services.Interfaces.Perfilamiento
@using PlantillaBlazor.Domain.Entities.Perfilamiento
@using PlantillaBlazor.Web.Entities.Authentication
@using PlantillaBlazor.Web.Entities.Authorization
@using PlantillaBlazor.Web.Services.Authorization

@implements IDisposable

@inject AuthorizationService _authService
@inject IUsuarioService _usuarioService
@inject ILogger<PageAuthorizationView> _logger

@if (_isLoading)
{
    <span>Autorizando...</span>
}
else
{
    @if (_autorizado)
    {
        @Authorize
    }
    else
    {
        @NotAuthorize
    }
}



@code {
    private bool _autorizado = false;
    private bool _isLoading = true;

    private IEnumerable<Modulo> _modulosUsuario;

    [Parameter]
    public RenderFragment Authorize { get; set; }

    [Parameter]
    public RenderFragment NotAuthorize { get; set; }

    [CascadingParameter]
    protected UserSession? UserSession { get; set; }

    [CascadingParameter]
    protected RouteData RouteData { get; set; }

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += LocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InvokeAsync(ValidarAutorizacion);
            }
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al consultar páginas para autorización");
        }
    }

    private async Task ConsultarModulos()
    {
        try
        {
            if (UserSession!.IdUsuario > 0)
            {
                _modulosUsuario = await _usuarioService.GetModulosUsuario(UserSession.IdUsuario);
            }
            else
            {
                _modulosUsuario = new List<Modulo>();
            }

            if (_modulosUsuario == null) _modulosUsuario = new List<Modulo>();
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, $"Error al consultar módulos para perfilamiento");
            _modulosUsuario = new List<Modulo>();
        }
    }

    private bool TieneAccesoModulo(long idModulo)
    {
        bool resultado = _modulosUsuario.Any(m => m.Id == idModulo);

        return resultado;
    }

    private async Task ValidarAutorizacion()
    {
        try
        {
            PageInfoAttribute pageInfo = RouteData.PageType.GetCustomAttributes<PageInfoAttribute>().FirstOrDefault()!;
            RouteAttribute routeAttribute = RouteData.PageType.GetCustomAttributes<RouteAttribute>().FirstOrDefault()!;

            if (pageInfo is null)
            {
                _logger.LogError($"La página {routeAttribute.Template} no tiene atributo de página");
                _autorizado = false;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            if (!pageInfo.Perfilable)
            {
                _autorizado = true;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            await ConsultarModulos();

            //Perfilamiento
            long idModulo = pageInfo.IdModulo;

            _autorizado = TieneAccesoModulo(idModulo);
            _isLoading = false;
            StateHasChanged();

            return;
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al verificar autorización de módulo");
            _autorizado = false;
            _isLoading = false;
            StateHasChanged();
            return;
        }
    }

    private async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        //string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        //System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");

        await InvokeAsync(ValidarAutorizacion);
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        _navigationManager.LocationChanged -= LocationChanged;
    }
}
