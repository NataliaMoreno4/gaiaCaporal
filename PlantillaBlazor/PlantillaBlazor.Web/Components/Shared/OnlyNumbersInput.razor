<input type="text" maxlength="@MaxLength" id="@_id" class="@Class" @bind:get="BindingValue" @bind:event="oninput" @bind:set="SetAsync" @onblur="HandleBlur" />

@code {
    [Parameter]
    public string BindingValue { get; set; }

    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public EventCallback<string> OnBlur { get; set; }

    [Parameter]
    public int MaxLength { get; set; }

    async Task SetAsync(string value) => await BindingValueChanged.InvokeAsync(value);

    private bool _isLoading = false;

    private string _id = $"input{Guid.NewGuid().ToString("N")}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("addSoloNumerosListener", _id);
            }
        }
        catch (Exception exe)
        {

        }
    }

    async Task HandleBlur(FocusEventArgs e)
    {
        if (OnBlur.HasDelegate)
        {
            await OnBlur.InvokeAsync(BindingValue);
        }
    }
}
